### 02 PJT


## 목표
# • 데이터 사이언스 분야에 대해 이해하기
# • 데이터 사이언스에서 자주 사용 되는 패키지를 사용해보기


## 관통 Ver1. 데이터 사이언스 기초
# 학습 내용 정리
#   1. Google 주식 데이터를 다운로드 받습니다.
#   2. 데이터 사이언스에서 자주 사용되는 패키지를 사용하여
#   3. 원하는 데이터만 뽑아내서 차트로 출력합니다.

# Jupyter notebook 이란?
#   • 데이터 사이언스 작업에 많이 활용되는 파이썬 개발 환경
#   • 웹 브라우저에서 실행
#   • 코드 실행, 텍스트 문서 작성, 시각화 등을 하나의 문서에 통합하여 작업 가능
#   • 데이터 사이언스(및 연구) 작업에 많이 쓰이는 이유
#       • 셀 단위 코드 실행으로 결과를 바로 확인할 수 있음
#       • 문서를 작성할 수 있는 마크다운 기능(설명 작성) 제공 -> 가독성이 좋다.
#       • 개별적인 코드 블록을 실행할 수 있음
#   비슷한 프로그램으로는 구글 코랩(colab)이 있다.


# 데이터 사이언스
# 데이터 사이언스란?
#   • "다양한 데이터로부터 새로운 지식과 정보를 추출"하기 위해
#     과학적 방법론, 프로세스, 알고리즘, 시스템을 동원하는 융합 분야
#   • 컴퓨터 과학, 통계학, 수학 등 다양한 학문의 원리와 기술을 활용
#   해킹 실력(컴퓨터 실력; 싸피 교육) + 도메인 전문성 + 수학 및 통계에 대한 지식
#       = 데이터 사이언스
#   해킹 + 도메인 = 위험구역!
#       -> 데이터를 뽑아낼 수는 있으나 어떠한 의미가 있는지 분석이 안 되는 상태 
#   평생 공부해야하는 분야!
# 데이터 사이언스 프로세스
# • 필요한 정보를 추출하는 5가지 단계
#   1. 문제 정의 : 해결하고자 하는 문제 정의 
#       ex.7월 29일에는 주가가 오를까?
#   2. 데이터 수집 : 문제 해결에 필요한 데이터 수집
#       ex. 경제 상황, 추세, 과거 주가, 뉴스 기사 등
#   3. 데이터 전처리(정제) : 실질적인 분석을 수행하기 위해 데이터를 가공하는 단계 (가장 중요)
#       • 수집한 데이터의 오류 제거(결측치, 이상치), 데이터 형식 변환 등
#   4. 데이터 분석 : 전처리가 완료된 데이터에서 필요한 정보를 추출하는 단계
#   5. 결과 해석 및 공유 : 의사 결정에 활용하기 위해 결과를 해석하고 시각화 후 공유하는 단계
#@@ AI(예측 모델)가 활용하는 단계 -> 4. 데이터 분석
#@@ 생성형 AI가 나오면서 AI로 전반적인 프로세스에 모두 관여하게 되었다.


# 데이터 사이언스 프로세스 실습
#   프로세스 1. 문제 정의:
#       구글의 주식 가격은 앞으로 어떻게 될까?
#   프로세스 2. 데이터 수집
#   • 주식 가격을 분석하기 위해서는 기간 별 주식 가격에 대한 데이터가 필요합니다.
#   • 데이터 수집은 다양한 기술과 방법을 활용할 수 있습니다.
#       • 웹 스크래핑(Web Scraping): 웹 페이지에서 데이터를 추출하는 기술
#           ex. 뉴스 기사
#       • 웹 크롤링(Web Crawling): 웹 페이지를 자동으로 탐색하고 데이터를 수집하는 기술
#           웹 스크래핑과 비슷한 개념
#       • Open API 활용: 공개된 API 를 통해 데이터를 수집
#       • 데이터 공유 플랫폼 활용: 다양한 사용자가 데이터를 공유하고 활용할 수 있는 온라인 플랫폼
#           • 종류: 캐글(Kaggle), Data.world , 데이콘(Dacon), 공공데이터포털 등
#@@     데이터 수집 활용 시 법적 침해 등의 문제는 어떻게 되나요?
#@@         robots.txt에 대해 알아보기!
#    데이터 수집 - 캐글(Kaggle)
#       • 데이터 분석 경진대회 플랫폼
#       • 기업 및 단체에서 데이터와 해결 과제를 등록하면,
#         데이터 과학자들이 이를 해결하는 방법을 개발하고 경쟁할 수 있는 플랫폼
#       • 경진 대회, 데이터셋 공유, 토론 등의 기능이 가능하며 많은 데이터 과학자와 분석가들이 활용함
#       • 실습을 위해 캐글의 구글 주가 데이터를 다운로드 받아 활용합니다.
#    [참고] csv 란 ?
#       • 몇 가지 필드를 쉼표(,) 로 구분한 텍스트 데이터 및 텍스트 파일
#       • 일반적으로 표 형식의 데이터를 CSV 형태로 많이 사용
#       • 저장, 전송 및 처리 속도가 빠르며, 처리 가능한 프로그램이 다양합니다.
#@@         일반 텍스트 파일보다 빠름.(보통 텍스트 파일은 개발에 사용 안함)
#   프로세스 3. 데이터 전처리(정제)
#       • 데이터 전처리 단계를 분석을 진행하기 전 데이터를 정제하는 단계입니다.
#       • 다음과 같은 과정을 포함합니다.
#           • 불완전하거나 오류가 있는 데이터를 제거하여 데이터의 품질을 개선
#           • 중복 데이터 제거
#           • 분석하기 적절한 형식으로 데이터를 변환
#       • 데이터 전처리 및 분석에 사용되는 파이썬 패키지
#           • Numpy, Pandas, Matplotlib
#               데이터 분석에 파이썬이 많이 쓰이게 된 이유!
#       • 데이터 사이언스에서 가장 많이 사용되는 3종 패키지 입니다.
#               **반드시 알아두어야 합니다.**
#       • 데이터 처리 및 데이터 분석
#           • Numpy: 수학 계산용 패키지. Pandas 와 Matplotlib 를 사용하기 위해 활용되는 패키지
#           • Pandas: 원하는 데이터만 추출하거나 데이터를 분석할 때 활용되는 패키지
#       • 데이터 시각화
#           • Matplotlib: 그래프를 그려주는 패키지


#       Numpy (넘파이)
#       • 다차원 배열을 쉽게 처리하고 효율적으로 사용할 수 있도록 지원하는 파이썬 패키지
#       • 장점
#           • Numpy 행렬 연산은 데이터가 많을수록 Python 반복문에 비해 훨씬 빠르다.
#           • 다차원 행렬 자료 구조를 제공하여 개발하기 편하다.
#       • 특징
#           • CPython(공식 사이트의 Python) 에서만 사용 가능
#           • 행렬 인덱싱(Array Indexing) 기능 제공
#             import csv
#             import numpy as np # as: 별명
#             import pandas as pd
#       Pandas (판다스)
#       • Numpy 의 한계
#           • 유연성(데이터에 레이블을 붙이거나, 누락된 데이터로 작업)이 부족함
#           • 그룹화, 피벗 등 구조화가 부족함
#       • Pandas 는 마치 프로그래밍 버전의 엑셀을 다루듯 고성능의 데이터 구조를 만들 수 있음
#       • Numpy 기반으로 만들어진 패키지로, Series(1차원 배열) 과 DataFrame(2차원 배열) 이라는
#         효율적인 자료구조 제공
#       Matplolib
#        • Python 에서 데이터 시각화를 위해 가장 널리 사용되는 라이브러리
#        • 다양한 종류의 그래프와 도표를 생성하고 데이터를 시각적으로 표현할 수 있습니다.


## 관통 Ver2. 파이썬을 활용한 데이터 수집2
# API를 활용한 데이터 수집 – API 사용 복습
#   오픈 API
#       - 공식문서 (메뉴얼)
#       - API KEY
#       - 할당량 체크

## 정리
# 버전1. 완전 새로운 내용들!
#   - 핵심: 구글링(+생성형 AI)을 포함한 검색 능력 기르기!
# 버전2. 복습 위주로 구성
#   - 핵심: API 완벽하게 이해하기
# 문제를 확인중 -> 풀이 -> 오류 or 모른다
#    -> 구글링 및 gpt 활용한 검색부터!!
#    -> pjt 금요일의 핵심: 스스로 해결하는 능력을 기르는 날!
# 최선을 다해서 구현한 대로 제출
#    -> 어렵거나 막힌 부분 README.md 에 작성
